type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | SEMICOLON
  | MODULUS
  | EOF
  | LITERAL of (
# 7 "parser.mly"
        int
# 14 "parser.ml"
)
  | BLIT of (
# 8 "parser.mly"
        bool
# 19 "parser.ml"
)
  | VARIABLE of (
# 9 "parser.mly"
        string
# 24 "parser.ml"
)
  | FLOATLIT of (
# 10 "parser.mly"
        float
# 29 "parser.ml"
)
  | STRINGLIT of (
# 11 "parser.mly"
        string
# 34 "parser.ml"
)
  | EQL
  | NOTEQL
  | GT
  | LT
  | GTEQ
  | LTEQ
  | AND
  | OR
  | NOT
  | CREATE
  | SELECT
  | FROM
  | AS
  | WHERE
  | INSERT
  | INTO
  | DELETE
  | UNION
  | INTERSECT
  | UPDATE
  | APPLY
  | WHILE
  | FOR
  | RETURN
  | QUOTES
  | DOT
  | VERTEX
  | EDGE
  | VERTICES
  | EDGES
  | LP
  | RP
  | LB
  | RB
  | LC
  | RC
  | COMMA
  | ARROW
  | COMMENT
  | GRAPH
  | IF
  | ELSE
  | ELIF
  | DEFINE
  | FUNCTION

open Parsing
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 86 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* ASSIGN *);
  262 (* SEMICOLON *);
  263 (* MODULUS *);
    0 (* EOF *);
  269 (* EQL *);
  270 (* NOTEQL *);
  271 (* GT *);
  272 (* LT *);
  273 (* GTEQ *);
  274 (* LTEQ *);
  275 (* AND *);
  276 (* OR *);
  277 (* NOT *);
  278 (* CREATE *);
  279 (* SELECT *);
  280 (* FROM *);
  281 (* AS *);
  282 (* WHERE *);
  283 (* INSERT *);
  284 (* INTO *);
  285 (* DELETE *);
  286 (* UNION *);
  287 (* INTERSECT *);
  288 (* UPDATE *);
  289 (* APPLY *);
  290 (* WHILE *);
  291 (* FOR *);
  292 (* RETURN *);
  293 (* QUOTES *);
  294 (* DOT *);
  295 (* VERTEX *);
  296 (* EDGE *);
  297 (* VERTICES *);
  298 (* EDGES *);
  299 (* LP *);
  300 (* RP *);
  301 (* LB *);
  302 (* RB *);
  303 (* LC *);
  304 (* RC *);
  305 (* COMMA *);
  306 (* ARROW *);
  307 (* COMMENT *);
  308 (* GRAPH *);
  309 (* IF *);
  310 (* ELSE *);
  311 (* ELIF *);
  312 (* DEFINE *);
  313 (* FUNCTION *);
    0|]

let yytransl_block = [|
  264 (* LITERAL *);
  265 (* BLIT *);
  266 (* VARIABLE *);
  267 (* FLOATLIT *);
  268 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\003\000\004\000\005\000\005\000\
\005\000\005\000\005\000\005\000\001\000\001\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\008\000\008\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\009\000\000\000"

let yylen = "\002\000\
\006\000\012\000\003\000\001\000\000\000\003\000\004\000\005\000\
\006\000\006\000\005\000\005\000\000\000\002\000\002\000\003\000\
\003\000\007\000\012\000\011\000\007\000\011\000\004\000\007\000\
\007\000\008\000\001\000\001\000\001\000\003\000\001\000\003\000\
\003\000\003\000\004\000\004\000\004\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\027\000\029\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\052\000\017\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\047\000\048\000\049\000\000\000\000\000\
\023\000\007\000\000\000\000\000\000\000\035\000\000\000\006\000\
\036\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\011\000\012\000\000\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\021\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\020\000\000\000\000\000\
\000\000\000\000\019\000\002\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\020\000\068\000\069\000\033\000\021\000\022\000\023\000\145\000\
\000\000"

let yysindex = "\027\000\
\053\255\000\000\000\000\000\000\034\255\000\000\150\000\242\254\
\055\255\056\255\036\255\248\254\043\255\062\255\150\000\175\000\
\053\255\075\255\118\255\000\000\109\255\053\255\207\000\150\000\
\049\255\095\255\010\255\107\255\099\255\102\255\133\255\248\254\
\120\255\108\255\111\255\131\255\150\000\150\000\227\000\028\255\
\166\255\110\255\150\000\128\255\162\255\000\000\150\000\150\000\
\150\000\150\000\000\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\051\001\000\000\000\000\150\255\
\057\255\071\255\036\255\125\255\129\255\167\255\139\255\141\255\
\177\255\198\255\247\000\000\000\179\255\193\255\000\000\000\000\
\218\255\144\255\000\000\069\001\069\001\083\001\083\001\178\255\
\107\255\107\255\000\000\000\000\000\000\000\000\249\254\249\254\
\000\000\000\000\160\255\182\255\183\255\000\000\248\254\000\000\
\000\000\199\255\213\255\000\000\161\255\150\000\180\255\184\255\
\192\255\194\255\000\000\216\255\217\255\000\000\203\255\206\255\
\053\255\011\001\000\000\000\000\053\255\053\255\000\000\000\000\
\185\255\228\255\196\255\150\000\201\255\204\255\000\000\219\255\
\000\000\058\000\082\255\000\000\243\255\207\255\208\255\226\255\
\220\255\222\255\053\255\053\255\150\000\214\255\211\255\223\255\
\224\255\078\000\053\255\006\000\000\000\000\000\229\255\225\255\
\231\255\053\255\000\000\000\000\233\255\227\255\000\000"

let yyrindex = "\000\000\
\021\001\000\000\000\000\000\000\031\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\235\255\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\146\255\023\255\000\000\000\000\000\000\241\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\110\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\253\254\000\000\000\000\000\000\
\000\000\000\000\000\000\248\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\255\097\255\067\255\091\255\016\255\
\113\255\244\255\000\000\000\000\000\000\000\000\130\000\137\000\
\000\000\000\000\000\000\000\000\000\000\000\000\241\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\235\255\000\000\000\000\000\000\235\255\235\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\235\255\235\255\000\000\000\000\000\000\000\000\
\000\000\000\000\235\255\000\000\000\000\000\000\000\000\000\000\
\000\000\235\255\000\000\000\000\000\000\236\255\000\000"

let yygindex = "\000\000\
\239\255\017\001\192\000\205\255\000\000\000\000\253\255\131\000\
\000\000"

let yytablesize = 615
let yytable = "\042\000\
\018\000\013\000\030\000\028\000\046\000\053\000\054\000\055\000\
\056\000\057\000\058\000\039\000\041\000\099\000\024\000\102\000\
\043\000\043\000\043\000\043\000\061\000\043\000\043\000\038\000\
\038\000\038\000\038\000\001\000\038\000\038\000\034\000\035\000\
\024\000\074\000\075\000\038\000\038\000\029\000\024\000\081\000\
\030\000\038\000\038\000\084\000\085\000\086\000\087\000\025\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\077\000\078\000\043\000\003\000\004\000\005\000\006\000\
\030\000\025\000\038\000\041\000\041\000\041\000\041\000\025\000\
\041\000\007\000\008\000\009\000\026\000\039\000\039\000\010\000\
\032\000\011\000\039\000\031\000\012\000\037\000\013\000\014\000\
\015\000\062\000\063\000\042\000\042\000\042\000\042\000\016\000\
\042\000\040\000\040\000\017\000\098\000\032\000\040\000\131\000\
\038\000\018\000\122\000\133\000\134\000\019\000\041\000\100\000\
\101\000\044\000\044\000\044\000\044\000\043\000\044\000\044\000\
\039\000\055\000\056\000\057\000\058\000\044\000\044\000\044\000\
\138\000\152\000\153\000\044\000\044\000\045\000\042\000\143\000\
\144\000\160\000\064\000\066\000\040\000\065\000\067\000\070\000\
\165\000\154\000\031\000\031\000\031\000\031\000\071\000\031\000\
\031\000\072\000\073\000\097\000\044\000\080\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\047\000\048\000\
\049\000\050\000\082\000\083\000\052\000\103\000\104\000\106\000\
\105\000\107\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\108\000\114\000\111\000\031\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\047\000\048\000\
\049\000\050\000\112\000\115\000\052\000\116\000\117\000\121\000\
\119\000\079\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\047\000\048\000\049\000\050\000\120\000\123\000\
\052\000\127\000\128\000\124\000\135\000\136\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\125\000\129\000\
\126\000\109\000\130\000\137\000\045\000\045\000\045\000\045\000\
\139\000\045\000\045\000\140\000\146\000\147\000\148\000\141\000\
\045\000\045\000\151\000\156\000\155\000\113\000\045\000\045\000\
\018\000\018\000\018\000\018\000\149\000\161\000\157\000\158\000\
\163\000\150\000\164\000\162\000\013\000\018\000\018\000\018\000\
\166\000\144\000\013\000\018\000\036\000\018\000\005\000\045\000\
\018\000\025\000\018\000\018\000\018\000\004\000\118\000\000\000\
\167\000\000\000\000\000\018\000\000\000\000\000\000\000\018\000\
\018\000\013\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\018\000\047\000\048\000\049\000\050\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\047\000\048\000\
\049\000\050\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\000\000\142\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\
\031\000\031\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\159\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\050\000\050\000\050\000\050\000\000\000\050\000\
\050\000\051\000\051\000\051\000\051\000\000\000\051\000\051\000\
\000\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\031\000\000\000\051\000\051\000\003\000\004\000\027\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\008\000\009\000\050\000\000\000\000\000\
\010\000\000\000\011\000\000\000\051\000\012\000\003\000\004\000\
\040\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\007\000\008\000\009\000\000\000\000\000\
\000\000\010\000\000\000\011\000\000\000\000\000\012\000\047\000\
\048\000\049\000\050\000\000\000\051\000\052\000\000\000\000\000\
\000\000\016\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\047\000\048\000\049\000\050\000\000\000\
\076\000\052\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\047\000\
\048\000\049\000\050\000\000\000\110\000\052\000\000\000\000\000\
\000\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\047\000\048\000\049\000\050\000\000\000\
\132\000\052\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\031\000\
\031\000\031\000\031\000\000\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\047\000\048\000\049\000\050\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\049\000\
\050\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\052\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000"

let yycheck = "\017\000\
\000\000\000\000\006\001\007\000\022\000\013\001\014\001\015\001\
\016\001\017\001\018\001\015\000\016\000\065\000\005\001\067\000\
\001\001\002\001\003\001\004\001\024\000\006\001\007\001\001\001\
\002\001\003\001\004\001\001\000\006\001\007\001\039\001\040\001\
\005\001\037\000\038\000\013\001\014\001\052\001\005\001\043\000\
\044\001\019\001\020\001\047\000\048\000\049\000\050\000\038\001\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\030\001\031\001\044\001\008\001\009\001\010\001\011\001\
\010\001\038\001\044\001\001\001\002\001\003\001\004\001\038\001\
\006\001\021\001\022\001\023\001\043\001\001\001\002\001\027\001\
\045\001\029\001\006\001\028\001\032\001\043\001\034\001\035\001\
\036\001\041\001\042\001\001\001\002\001\003\001\004\001\043\001\
\006\001\001\001\002\001\047\001\044\001\045\001\006\001\121\000\
\043\001\053\001\110\000\125\000\126\000\057\001\044\001\041\001\
\042\001\001\001\002\001\003\001\004\001\043\001\006\001\007\001\
\044\001\015\001\016\001\017\001\018\001\013\001\014\001\010\001\
\132\000\147\000\148\000\019\001\020\001\025\001\044\001\054\001\
\055\001\155\000\044\001\038\001\044\001\043\001\010\001\024\001\
\162\000\149\000\001\001\002\001\003\001\004\001\043\001\006\001\
\007\001\043\001\024\001\006\001\044\001\048\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\002\001\
\003\001\004\001\043\001\010\001\007\001\049\001\046\001\037\001\
\010\001\037\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\010\001\044\001\010\001\044\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\002\001\
\003\001\004\001\010\001\044\001\007\001\024\001\024\001\047\001\
\010\001\044\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\002\001\003\001\004\001\010\001\044\001\
\007\001\010\001\010\001\044\001\044\001\002\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\047\001\037\001\
\047\001\044\001\037\001\048\001\001\001\002\001\003\001\004\001\
\048\001\006\001\007\001\048\001\010\001\047\001\047\001\037\001\
\013\001\014\001\037\001\049\001\047\001\044\001\019\001\020\001\
\008\001\009\001\010\001\011\001\043\001\008\001\048\001\048\001\
\048\001\054\001\044\001\047\001\000\000\021\001\022\001\023\001\
\048\001\055\001\048\001\027\001\012\000\029\001\046\001\044\001\
\032\001\054\001\034\001\035\001\036\001\046\001\103\000\255\255\
\166\000\255\255\255\255\043\001\255\255\255\255\255\255\047\001\
\048\001\048\001\255\255\255\255\255\255\053\001\255\255\255\255\
\255\255\057\001\001\001\002\001\003\001\004\001\255\255\255\255\
\007\001\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\044\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\002\001\003\001\004\001\255\255\006\001\
\007\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\255\255\
\255\255\044\001\255\255\019\001\020\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\044\001\255\255\255\255\
\027\001\255\255\029\001\255\255\044\001\032\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\255\255\021\001\022\001\023\001\255\255\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\032\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\043\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\002\001\003\001\004\001\255\255\
\255\255\007\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\003\001\
\004\001\255\255\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\007\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  SEMICOLON\000\
  MODULUS\000\
  EOF\000\
  EQL\000\
  NOTEQL\000\
  GT\000\
  LT\000\
  GTEQ\000\
  LTEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  CREATE\000\
  SELECT\000\
  FROM\000\
  AS\000\
  WHERE\000\
  INSERT\000\
  INTO\000\
  DELETE\000\
  UNION\000\
  INTERSECT\000\
  UPDATE\000\
  APPLY\000\
  WHILE\000\
  FOR\000\
  RETURN\000\
  QUOTES\000\
  DOT\000\
  VERTEX\000\
  EDGE\000\
  VERTICES\000\
  EDGES\000\
  LP\000\
  RP\000\
  LB\000\
  RB\000\
  LC\000\
  RC\000\
  COMMA\000\
  ARROW\000\
  COMMENT\000\
  GRAPH\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  DEFINE\000\
  FUNCTION\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  VARIABLE\000\
  FLOATLIT\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 40 "parser.mly"
                                          ( Vertex(_4) )
# 476 "parser.ml"
               : 'graph_element))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 41 "parser.mly"
                                                                                   ( Edge(_4, _8, _11) )
# 485 "parser.ml"
               : 'graph_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'graph_element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'graph_elements) in
    Obj.repr(
# 44 "parser.mly"
                                         ( _1::_3 )
# 493 "parser.ml"
               : 'graph_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'graph_element) in
    Obj.repr(
# 45 "parser.mly"
                    ( [_1] )
# 500 "parser.ml"
               : 'graph_elements))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                ( [] )
# 506 "parser.ml"
               : 'graph_elements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'graph_elements) in
    Obj.repr(
# 50 "parser.mly"
                           (_2)
# 513 "parser.ml"
               : 'graph_elements_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                         ( Graph([]) )
# 519 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'graph_elements_list) in
    Obj.repr(
# 54 "parser.mly"
                                             ( Graph(_4) )
# 526 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                                                 ( GraphAccess(_6, "vertices") )
# 534 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                              ( GraphAccess(_6, "edges") )
# 542 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 57 "parser.mly"
                                    ( GraphQuery(_2, _4, "union") )
# 550 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 58 "parser.mly"
                                        ( GraphQuery(_2, _4, "intersect") )
# 558 "parser.ml"
               : 'graph_operation))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                  ( [] )
# 564 "parser.ml"
               : Ast.stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.stmt_list) in
    Obj.repr(
# 62 "parser.mly"
                     (_1::_2 )
# 572 "parser.ml"
               : Ast.stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                     ( Expr(_1) )
# 579 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                            (Return(_2) )
# 586 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 71 "parser.mly"
                      ( Block(_2) )
# 593 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 72 "parser.mly"
                                    ( If(_3, _6) )
# 601 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : Ast.stmt_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'elif_stmt_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 73 "parser.mly"
                                                                       ( IfElif(_3, _6, _8, _11))
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Ast.stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 74 "parser.mly"
                                                         ( IfElse(_3, _6, _10))
# 620 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 75 "parser.mly"
                                       ( While(_3, _6))
# 628 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 76 "parser.mly"
                                                                   ( For(_3, _5, _7, _10))
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 77 "parser.mly"
                              ( print_endline("Calling func"); FunctionCall(_1) )
# 645 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 78 "parser.mly"
                                              (FunctionCreation(_2, _6))
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt_list) in
    Obj.repr(
# 83 "parser.mly"
                                       ([(_3, _6)])
# 661 "parser.ml"
               : 'elif_stmt_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ast.stmt_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt_list) in
    Obj.repr(
# 84 "parser.mly"
                                                     ((_3, _6)::_8)
# 670 "parser.ml"
               : 'elif_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 87 "parser.mly"
                 ( Lit(_1) )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 88 "parser.mly"
               ( FloatLit(_1) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 89 "parser.mly"
               ( BoolLit(_1) )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                           (Asn(_1, _3))
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
               ( Var(_1) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 94 "parser.mly"
                            ( GraphAccess(_1, "vertices") )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 95 "parser.mly"
                         ( GraphAccess(_1, "edges") )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'graph_operation) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                                  (GraphAsn(_3, _1))
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'graph_elements_list) in
    Obj.repr(
# 97 "parser.mly"
                                               (GraphOp(_3, _4, "insert"))
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'graph_elements_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                                               (GraphOp(_4, _2, "delete"))
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'graph_element) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                                         ( GraphUpdate(_4, _2) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
               ( Uniop(Not, _2) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     (Binop(_1, Add, _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                      ( Binop(_1, Sub, _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                      ( Binop(_1, Mul, _3) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                        ( Binop(_1, Mod, _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                    ( Binop(_1, Eq, _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                       ( Binop(_1, Neq, _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                   ( Binop(_1, Gt, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                   ( Binop(_1, Lt, _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Gteq, _3) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Lteq, _3) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                    ( Binop(_1, And, _3) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                   ( Binop(_1, Or, _3) )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                 ( _2 )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
           ( _1 )
# 877 "parser.ml"
               : 'entry))
(* Entry stmt_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmt_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.stmt_list)
